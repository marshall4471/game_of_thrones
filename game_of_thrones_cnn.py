# -*- coding: utf-8 -*-
"""game_of_thrones_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugrzYyWFIDOEwLHG6EkmDWBG0QPBXD2Y
"""

from google.colab import drive

drive.mount('/content/drive/')

import tensorflow as tf
import matplotlib.pyplot as plt

from keras.layers import Conv2D, Activation, GlobalAvgPool2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization
from keras.layers import BatchNormalization
from keras.models import Sequential

file1='/content/drive/MyDrive/game/dataset/train'

file2= '/content/drive/MyDrive/game/dataset/test'

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.05,
                                   zoom_range = 0.05,
                                   horizontal_flip = True)

train_set = train_datagen.flow_from_directory(file1,
                                                 target_size = (384, 384),
                                                 class_mode='categorical',
                                                 batch_size = 16)

test_datagen = ImageDataGenerator(rescale = 1./255)

test_set = test_datagen.flow_from_directory(file2,
                                            target_size = (384, 384),
                                            class_mode='categorical',
                                            batch_size =16)

cnn = tf.keras.models.Sequential()
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[384, 384, 3]))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
cnn.add(tf.keras.layers.Flatten())
cnn.add(tf.keras.layers.Dense(units=9, activation='sigmoid'))
cnn.compile(optimizer = 'adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])

cnn.summary()

history = cnn.fit(train_set, validation_data =test_set, epochs=20, verbose=2)

import cv2

import matplotlib.pyplot as plt

import numpy as np


x = plt.imread('/jaime.jpg')
plt.imshow(x)

x = x/255

x = np.resize(x,(1,384,384,3))

x.shape

classes = list(train_set.class_indices)

print(classes[np.argmax(cnn.predict(x))])

y = plt.imread('/peter.jpg')
plt.imshow(y)

y = y/255

y = np.resize(y,(1,384,384,3))

y.shape

classes = list(train_set.class_indices)

print(classes[np.argmax(cnn.predict(y))])

z = plt.imread('/sansa.jpg')
plt.imshow(z)

z = z/255

z = np.resize(z,(1,384,384,3))

z.shape

classes = list(train_set.class_indices)

print(classes[np.argmax(cnn.predict(z))])